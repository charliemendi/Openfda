import http.server
import socketserver

# -- Puerto donde lanzar el servidor
PORT = 8080


# Clase con nuestro manejador. Es una clase derivada de BaseHTTPRequestHandler
# Esto significa que "hereda" todos los metodos de esta clase. Y los que
# nosotros consideremos los podemos reemplazar por los nuestros
class testHTTPRequestHandler(http.server.BaseHTTPRequestHandler):

    # GET. Este metodo se invoca automaticamente cada vez que hay una
    # peticion GET por HTTP. El recurso que nos solicitan se encuentra
    # en self.path
    def do_GET(self):

        # La primera linea del mensaje de respuesta es el
        # status. Indicamos que OK
        self.send_response(200)

        # En las siguientes lineas de la respuesta colocamos las
        # cabeceras necesarias para que el cliente entienda el
        # contenido que le enviamos (que sera HTML)
        self.send_header('Content-type', 'text/html')
        self.end_headers()

        # Este es el mensaje que enviamos al cliente: un texto y
        # el recurso solicitado
        if self.path == "/medicamentos": # Nos fijamos en la posicion 1 y compara para determinar que fichero abrir
            import http.client
            import json

            headers = {'User-Agent': 'http-client'}

            conn = http.client.HTTPSConnection("api.fda.gov")
            conn.request("GET", "/drug/label.json", None, headers)
            r1 = conn.getresponse()
            print(r1.status, r1.reason)
            repos_raw = r1.read().decode("utf-8")
            conn.close()

            repos = json.loads(repos_raw)
            n = 0
            List=[]
            while n != 10:
                List.append("La id del producto es", repos["results"][0]["id"], " El nombre del producto es",repos["results"][0]["openfda"]["generic_name"], " El tag es",repos["results"][0]["openfda"]["brand_name"])
                n += 1
            contenido= """< !doctypehtml >
                            <html>
                                <body style = 'background-color: blue' >
                                    <h1> Medicamentos </h2>
                                    <p> List </p>
                                </body >
                            </html >"""

        else:
            contenido= """<!doctype html>
                            <html>
                               <body style='background-color: red'>
                                 <h1>ERROR</h2>
                                 <p>Introduzca /medicamentos </p>
                               </body>
                            </html>"""


        message = "Hello world! " + self.path + contenido
        # Enviar el mensaaje completo
        self.wfile.write(bytes(message, "utf8"))
        print("File served!")
        return


# ----------------------------------
# El servidor comienza a aqui
# ----------------------------------
# Establecemos como manejador nuestra propia clase
Handler = testHTTPRequestHandler

# -- Configurar el socket del servidor, para esperar conexiones de clientes
httpd=socketserver.TCPServer(("", PORT), Handler)
print("serving at port", PORT)

    # Entrar en el bucle principal
    # Las peticiones se atienden desde nuestro manejador
    # Cada vez que se ocurra un "GET" se invoca al metodo do_GET de
    # nuestro manejador
try:
    httpd.serve_forever()
except KeyboardInterrupt:
    print("")
    print("Interrumpido por el usuario")

print("")
print("Servidor parado")
